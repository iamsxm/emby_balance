# Nginx下载和统计配置
server {
    listen 80;
    server_name _;
    
    # 定义日志格式
    access_log /var/log/nginx/download_stats.log download_stats;
    error_log /var/log/nginx/error.log warn;
    
    # 健康检查端点
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # 处理emby_download文件下载请求
    location /emby_download {
        # 从查询参数中获取文件路径
        if ($arg_path = "") {
            return 400 "Missing path parameter";
        }
        
        # 设置变量用于统计
        set $start_time $msec;
        set $route_id $arg_route_id;
        
        # 设置文件根目录
        root $media_root;
        
        # 直接返回文件
        try_files $arg_path =404;
        
        # 设置适当的Content-Type和Headers
        location ~* \.(mp4|mkv|avi|mov|wmv|flv|webm)$ {
            add_header Content-Type video/mp4;
            add_header Accept-Ranges bytes;
            add_header Cache-Control "public, max-age=31536000";
            
            # 下载完成后发送统计信息到Spring Boot应用
            access_by_lua_block {
                local start_time = ngx.var.start_time
                local route_id = ngx.var.route_id or "unknown"
                
                -- 在请求结束后异步发送统计信息
                ngx.timer.at(0, function(premature)
                    if premature then return end
                    
                    local http = require "resty.http"
                    local httpc = http.new()
                    
                    local end_time = ngx.now() * 1000
                    local duration = end_time - (start_time * 1000)
                    
                    local stats_data = {
                        routeId = route_id,
                        clientIp = ngx.var.remote_addr,
                        filePath = ngx.var.arg_path,
                        downloadSize = ngx.var.body_bytes_sent or 0,
                        downloadDuration = duration,
                        responseTime = (ngx.var.upstream_response_time or 0) * 1000,
                        success = (ngx.var.status == "200"),
                        userAgent = ngx.var.http_user_agent
                    }
                    
                    -- 发送统计数据到Spring Boot应用
                    local spring_boot_url = "http://" .. (os.getenv("SPRING_BOOT_HOST") or "emby-balance") .. ":" .. (os.getenv("SPRING_BOOT_PORT") or "8080")
                    local res, err = httpc:request_uri(spring_boot_url .. "/api/statistics/record", {
                        method = "POST",
                        body = require("cjson").encode(stats_data),
                        headers = {
                            ["Content-Type"] = "application/json",
                        },
                        timeout = 5000,
                    })
                    
                    if not res then
                        ngx.log(ngx.ERR, "发送统计数据失败: ", err)
                    end
                    
                    httpc:close()
                end)
            }
        }
        
        location ~* \.(mp3|flac|wav|aac|ogg|m4a)$ {
            add_header Content-Type audio/mpeg;
            add_header Accept-Ranges bytes;
            add_header Cache-Control "public, max-age=31536000";
        }
        
        # 错误处理
        error_page 404 = @not_found;
    }
    
    # 404错误处理
    location @not_found {
        access_by_lua_block {
            local route_id = ngx.var.arg_route_id or "unknown"
            
            ngx.timer.at(0, function(premature)
                if premature then return end
                
                local http = require "resty.http"
                local httpc = http.new()
                
                local stats_data = {
                    routeId = route_id,
                    clientIp = ngx.var.remote_addr,
                    filePath = ngx.var.arg_path,
                    downloadSize = 0,
                    downloadDuration = 0,
                    responseTime = 0,
                    success = false,
                    userAgent = ngx.var.http_user_agent
                }
                
                local spring_boot_url = "http://" .. (os.getenv("SPRING_BOOT_HOST") or "emby-balance") .. ":" .. (os.getenv("SPRING_BOOT_PORT") or "8080")
                local res, err = httpc:request_uri(spring_boot_url .. "/api/statistics/record", {
                    method = "POST",
                    body = require("cjson").encode(stats_data),
                    headers = {
                        ["Content-Type"] = "application/json",
                    },
                    timeout = 5000,
                })
                
                httpc:close()
            end)
        }
        
        return 404 "File not found";
    }
}